<?php
/**
 * @file LiftIgniter, recommendation service integration.
 */

define('LIFTIGNITER_DEFAULT_WIDGET', 'default-widget');
define('LIFTIGNITER_LIST_PREFIX',    'li-recommendation-');
define('LIFTIGNITER_TPL_PREFIX',     'liftigniter-');
define('LIFTIGNITER_TPL_EXT',        '.mst');

/**
 * Implements hook_preprocess_page().
 */
function liftigniter_preprocess_page(&$variables) {
  if (!\Drupal::config('liftigniter.settings')->get('liftigniter_toggle')) {
    return;
  }

  $properties = array(
    'language',
  );

  // Just piggy-back/simplify DataLayer entity data colleciton code.
  if (\Drupal::moduleHandler()->moduleExists('datalayer') && \Drupal::config('liftigniter.settings')->get('liftigniter_metadata')) {

    $type = FALSE;
    $obj = _datalayer_menu_get_any_object($type);
    $output_data = array();

    if (is_object($obj) && $type) {
      $entity_info = \Drupal::entityManager()->getDefinition($type);
      $bundle = FALSE;

      // Add basic entity details.
      $output_data['type'] = $type;
      if (isset($obj->{$entity_info['entity keys']['bundle']})) {
        // Find how bundles are accessed before looking.
        $bundle = $obj->{$entity_info['entity keys']['bundle']};
        // Use nice label.
        $output_data['bundle'] = $entity_info['bundles'][$bundle]['label'];
      }

      // Entity property addition via hook.
      foreach (\Drupal::moduleHandler()->getImplementations('liftigniter_meta') as $module) {
        // Combine modules implementing hook_liftigniter_meta().
        $properties = array_merge($properties, \Drupal::moduleHandler()->invoke($module, 'liftigniter_meta'));
      }

      // Collect data.
      foreach ($properties as $p) {
        if (isset($obj->$p)) {
          $output_data[$p] = $obj->$p;
        }
      }
    }

    // Allow manual changes.
    \Drupal::moduleHandler()->alter('liftigniter_meta', $output_data, $type, $obj, $entity_info);

    // Put data on the page.
    drupal_add_html_head(array(
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#value' => \Drupal\Component\Serialization\Json::encode($output_data),
      '#attributes' => array(
        'type' => 'application/json',
        'id' => 'liftigniter-metadata',
      )), 'liftigniter_metadata'
    );

    // Add field list setting to the page.
    // @FIXME
// The Assets API has totally changed. CSS, JavaScript, and libraries are now
// attached directly to render arrays using the #attached property.
//
//
// @see https://www.drupal.org/node/2169605
// @see https://www.drupal.org/node/2408597
// drupal_add_js(array('liftIgniter' => array(
//       'fields' => array_merge($properties, array(
//         'title',
//         'thumbnail',
//         'type',
//         'bundle',
//       )),
//     )), 'setting');

  }

  // Add global settings to the page.
  // @FIXME
// The Assets API has totally changed. CSS, JavaScript, and libraries are now
// attached directly to render arrays using the #attached property.
//
//
// @see https://www.drupal.org/node/2169605
// @see https://www.drupal.org/node/2408597
// drupal_add_js(array('liftIgniter' => array(
//     'apiKey' => variable_get('liftigniter_api_key', ''),
//     'useWaypoints' => variable_get('liftigniter_waypoints', FALSE),
//     'useLang' => variable_get('liftigniter_use_language', TRUE),
//     'langDefaultNoPrefix' => variable_get('liftigniter_lang_default_no_prefix', FALSE),
//     'forceSameProtocol' => variable_get('liftigniter_force_same_protocol', FALSE),
//     'transformCallbacks' => array(),
//   )),'setting');

}


/**
 * Implements hook_block_info().
 */
function liftigniter_block_info() {
  $blocks = array();
  // @FIXME
// Could not extract the default value because it is either indeterminate, or
// not scalar. You'll need to provide a default value in
// config/install/liftigniter.settings.yml and config/schema/liftigniter.schema.yml.
$widgets = array_map('trim', explode(',',
    \Drupal::config('liftigniter.settings')->get('liftigniter_widget_blocks')
  ));

  // Create a block for each widget.
  foreach ($widgets as $delta) {
    $blocks['widget_' . $delta] = array(
      'info' => t('LiftIgniter: ' . $delta),
      'cache' => DRUPAL_NO_CACHE,
    );
  }

  return $blocks;
}


/**
 * Implements hook_block_configure().
 *
 * @param string $delta
 */
function liftigniter_block_configure($delta) {
  // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// return array(
//     'liftigniter_max_results' => array(
//       '#type' => 'textfield',
//       '#title' => t('Nuber of results'),
//       '#size' => 10,
//       '#description' => t('Max number of results to display.'),
//       '#default_value' => variable_get('liftigniter_max_results-' . $delta, 5),
//     )
//   );

}


/**
 * Implements hook_block_save().
 *
 * @param string $delta
 * @param array $edit
 */
function liftigniter_block_save($delta, $edit) {
  // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// variable_set('liftigniter_max_results-' . $delta, $edit['liftigniter_max_results']);

}


/**
 * Implements hook_block_view().
 *
 * @param string $delta
 *
 * @return array
 */
function liftigniter_block_view($delta = '') {
  if (!\Drupal::config('liftigniter.settings')->get('liftigniter_toggle') || !\Drupal::currentUser()->hasPermission('view liftigniter blocks')) {
    return;
  }

  // Keep a running list of all widget blocks being output on the page.
  $widgets = &drupal_static(__FUNCTION__, array());
  $widget_id = preg_replace('/^widget_/', '', $delta);

  // Place mustache template in the head.
  $template_output = array(
    '#type' => 'html_tag',
    '#tag' => 'script',
    '#value' => "\r\n" . _liftigniter_get_template($widget_id),
    '#attributes' => array(
      'type' => 'application/mustache',
      'id' => LIFTIGNITER_LIST_PREFIX . $widget_id,
    ),
  );
  drupal_add_html_head($template_output, 'liftigniter_template_' . $widget_id);

  // Update static variable.
  // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// $widgets = array($widget_id => array(
//     'max' => variable_get('liftigniter_max_results-' . $delta, 5),
//   )) + $widgets;


  // Return block render array for DOM placeholder and inject global settings.
  $block = array(
    'subject' => t('Recommended'),
    'content' => array(
      '#markup' => '<div id="' . LIFTIGNITER_LIST_PREFIX . $widget_id . '"></div>',
      '#attached' => array(
        'js' => array(
          array('type' => 'setting', 'data' => array('liftIgniter' => array(
            'widgets' => $widgets,
          ))),
          // @todo Self-hosted script option.
          array('type' => 'inline', 'data' => _liftigniter_get_script()),
          drupal_get_path('module', 'liftigniter') . '/liftigniter.js',
        ),
      ),
    ),
  );

  // Delay front-end API requests. Allow different library names.
  $waypoints = FALSE;
  if (libraries_get_path('jquery-waypoints')) {
    $waypoints = 'jquery-waypoints';
  }
  if (libraries_get_path('waypoints')) {
    $waypoints = 'waypoints';
  }
  if ($waypoints) {
    $block['#attached']['library'][] = $waypoints;
  }

  return $block;
}


/**
 * Discover which template file to use.
 *
 * @return string
 *   Contents of template file.
 */
function _liftigniter_get_template($widget_id) {
  // Check static or cached version. NOTE: Assignment test.
  // @FIXME Update caching.
  if ($template = &drupal_static(__FUNCTION__ . $widget_id, FALSE)) {
    return $template;
  }
  if ($cached = \Drupal::cache()->get('liftigniter_template_' . $widget_id)) {
    $template = $cached->data;
    return $template;
  }

  // Find and open the template file.
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $theme_path = drupal_get_path('theme', $theme) . '/';
  $locations = array(
    $theme_path . 'templates/' . $widget_id,
    $theme_path . 'templates/default-widget',
    $theme_path . $widget_id,
    $theme_path . 'default-widget',
    drupal_get_path('module', 'liftigniter') . '/' . $widget_id,
    drupal_get_path('module', 'liftigniter') . '/default-widget',
  );
  // Allow inserting candidate template locations.
  \Drupal::moduleHandler()->alter('liftigniter_templates', $locations);

  // Test until found.
  foreach (array_unique($locations) as $path) {
    if (is_file($path . LIFTIGNITER_TPL_EXT)) {
      // Get, stash and go.
      $template = file_get_contents($path . LIFTIGNITER_TPL_EXT);
      \Drupal::cache()->set('liftigniter_template_' . $widget_id, $template);
      return $template;
    }
  }

  \Drupal::logger('liftigniter')->error('LiftIgniter template file missing: @file', array('@file' => $widget_id));
  return FALSE;
}


/**
 * Return the embed code with key inserted.
 * @return string
 */
function _liftigniter_get_script() {
  // Assignment test for key set.
  if ($key = \Drupal::config('liftigniter.settings')->get('liftigniter_api_key')) {
    // Customer specific JS URL option.
    $filename = \Drupal::config('liftigniter.settings')->get('liftigniter_customer_js_url') ? $key : 'p';
    $js_url = 'cdn.petametrics.com/' . $filename . '.js';

    return <<<EOD
(function(w,d,s,p,v,e,r) {w['\$petametrics_var']=v;w[v]=w[v]||function(){(w[v].q=w[v].q||[]).push(arguments)};w[v].l=1*new Date();e=d.createElement(s),r=d.getElementsByTagName(s)[0];e.async=1;e.src=p;r.parentNode.insertBefore(e,r)})(window,document,'script','//$js_url','\$p');
\$p('init', '$key');
\$p('send', 'pageview');
EOD;
  }

  return '';
}
