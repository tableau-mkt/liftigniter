<?php

/**
 * @file
 * LiftIgniter, recommendation service integration.
 */

use Drupal\Component\Serialization\Json;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;

define('LIFTIGNITER_LIST_PREFIX', 'li-recommendation-');
define('LIFTIGNITER_TPL_EXT', '.mst');

/**
 * Implements hook_preprocess_page().
 */
function liftigniter_preprocess_page(&$variables) {
  $config = \Drupal::config('liftigniter.settings');
  if (!$config->get('liftigniter_toggle')) {
    return;
  }

  $js_settings = [];

  // Just piggy-back/simplify DataLayer entity data colleciton code.
  if (\Drupal::moduleHandler()->moduleExists('datalayer') && $config->get('liftigniter_metadata')) {

    // Load the metadata.
    $result = liftigniter_get_metadata();

    // Put data on the page.
    $html_head = [
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#value' => Json::encode($result['metadata']),
      '#attributes' => [
        'type' => 'application/json',
        'id' => 'liftigniter-metadata',
      ],
    ];
    $variables['#attached']['html_head'][] = [$html_head, 'liftigniter-metadata'];

    // Create field list settings for the page.
    $js_settings = [
      'fields' => array_merge($result['properties'], [
        'title',
        'thumbnail',
        'type',
        'bundle',
      ]),
    ];
  }

  // Create global settings array for the page.
  $api_key = $config->get('liftigniter_api_key');
  $filename = $config->get('liftigniter_customer_js_url') ? $api_key : 'p';
  $js_url = 'cdn.petametrics.com/' . $filename . '.js';
  $js_global_settings = [
    'apiKey' => $api_key,
    'jsURL' => $js_url,
    'useWaypoints' => $config->get('liftigniter_waypoints'),
    'useLang' => $config->get('liftigniter_use_language'),
    'langDefaultNoPrefix' => $config->get('liftigniter_lang_default_no_prefix'),
    'forceSameProtocol' => $config->get('liftigniter_force_same_protocol'),
    'transformCallbacks' => [],
  ];
  // Add the settings to the page.
  $variables['#attached']['drupalSettings']['liftIgniter'] = $js_global_settings + $js_settings;

}

/**
 * Loads the metadata for a given entity object.
 *
 * @return array
 *   Entity metadata and properties.
 */
function liftigniter_get_metadata() {
  $entity = _datalayer_menu_get_any_object();

  $properties = ['language'];

  $metadata = [];

  if ($entity instanceof EntityInterface) {
    $type = $entity->getEntityTypeID();
    // Add basic entity details.
    $metadata['type'] = $type;
    if (method_exists($entity, 'getType')) {
      $metadata['bundle'] = $entity->getType();
    }
    if ($entity instanceof NodeInterface) {
      $metadata['nid'] = $entity->id();
    }
    // Adding UUID because it might be useful in the long run.
    $metadata['uuid'] = $entity->uuid();

    // Entity property addition via hook.
    foreach (\Drupal::moduleHandler()->getImplementations('liftigniter_meta') as $module) {
      // Combine modules implementing hook_liftigniter_meta().
      $properties = array_merge($properties, \Drupal::moduleHandler()->invoke($module, 'liftigniter_meta'));
    }

    // Collect data.
    foreach ($properties as $key => $property) {
      if ($entity->hasField($property)) {
        $properties[$property] = $property;
        unset($properties[$key]);
      }
    }
  }
  // Allow manual changes.
  \Drupal::moduleHandler()->alter('liftigniter_meta', $metadata, $type, $entity);

  return [
    'metadata' => $metadata,
    'properties' => $properties,
  ];
}

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter().
 */
function liftigniter_block_view_block_content_alter(array &$build, BlockPluginInterface $block) {
  if (!\Drupal::config('liftigniter.settings')->get('liftigniter_toggle') || !\Drupal::currentUser()->hasPermission('view liftigniter blocks')) {
    return;
  }

  // Get the block_content type.
  // @TODO: Figure out a more direct way to get the type.
  $uuid = $block->getDerivativeId();
  $custom_block = \Drupal::service('entity.repository')->loadEntityByUuid('block_content', $uuid);
  $type = $custom_block->get('type')->getString();
  if ($type != 'liftigniter_widget') {
    return;
  }

  // Set the widget_id.
  $widget_id = preg_replace('/^widget_/', '', $build['#id']);

  // Get running list of all widget blocks being output on the page.
  $widgets = &drupal_static(__FUNCTION__, []);

  // Update static variable.
  $widgets[] = $widget_id;

  $settings = [
    'max' => $custom_block->field_liftigniter_max_results->value,
  ];

  // Allow other modules to add custom widget options.
  \Drupal::moduleHandler()->alter('liftigniter_widget_settings', $settings, $widget_id);

  // Place mustache template in the head.
  $template_output = [
    '#type' => 'html_tag',
    '#tag' => 'script',
    '#value' => "\r\n" . _liftigniter_get_template($widget_id),
    '#attributes' => [
      'type' => 'application/mustache',
      'id' => LIFTIGNITER_LIST_PREFIX . $widget_id,
    ],
  ];
  $build['#attached']['html_head'][] = [$template_output, 'liftigniter_template_' . $widget_id];

  // Override prerender to customize block render array for DOM placeholder and
  // inject global settings.
  $build['#configuration']['label'] = t('Recommended');
  $build['#pre_render'] = [];
  $build['content'] = [
    '#markup' => '<div id="' . LIFTIGNITER_LIST_PREFIX . $widget_id . '"></div>',
    '#attached' => [
      'drupalSettings' => [
        'liftIgniter' => [
          'widgets' => [$widget_id => $settings],
        ],
      ],
    ],
  ];
  // Add Liftigniter beacon and custom scripts once.
  if (count($widgets) === 1) {
    $build['content']['#attached']['library'][] = 'liftigniter/liftIgniter';
  }

  // Delay front-end API requests. Allow different library names.
  $waypoints = FALSE;
  if (function_exists('libraries_get_path') && libraries_get_path('jquery-waypoints')) {
    $waypoints = 'jquery-waypoints';
  }
  if (function_exists('libraries_get_path') && libraries_get_path('waypoints')) {
    $waypoints = 'waypoints';
  }
  if ($waypoints) {
    $build['content']['#attached']['library'][] = $waypoints;
  }

}

/**
 * Discover which template file to use.
 *
 * @return string
 *   Contents of template file.
 */
function _liftigniter_get_template($widget_id) {
  // Check static or cached version. NOTE: Assignment test.
  if ($template = &drupal_static(__FUNCTION__ . $widget_id, FALSE)) {
    return $template;
  }
  if ($cached = \Drupal::cache()->get('liftigniter_template_' . $widget_id)) {
    $template = $cached->data;
    return $template;
  }

  // Find and open the template file.
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $theme_path = drupal_get_path('theme', $theme) . '/';
  $locations = [
    $theme_path . 'templates/' . $widget_id,
    $theme_path . 'templates/default-widget',
    $theme_path . $widget_id,
    $theme_path . 'default-widget',
    drupal_get_path('module', 'liftigniter') . '/templates/' . $widget_id,
    drupal_get_path('module', 'liftigniter') . '/templates/default-widget',
  ];
  // Allow inserting candidate template locations.
  \Drupal::moduleHandler()->alter('liftigniter_templates', $locations);

  // Test until found.
  foreach (array_unique($locations) as $path) {
    if (is_file($path . LIFTIGNITER_TPL_EXT)) {
      // Get, stash and go.
      $template = file_get_contents($path . LIFTIGNITER_TPL_EXT);
      \Drupal::cache()->set('liftigniter_template_' . $widget_id, $template);
      return $template;
    }
  }

  \Drupal::logger('liftigniter')->error('LiftIgniter template file missing: @file', ['@file' => $widget_id]);
  return FALSE;
}
