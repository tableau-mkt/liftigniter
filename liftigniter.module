<?php
/**
 * @file LiftIgniter, recommendation service integration.
 */

use Drupal\Component\Serialization\Json;

define('LIFTIGNITER_DEFAULT_WIDGET', 'default-widget');
define('LIFTIGNITER_LIST_PREFIX',    'li-recommendation-');
define('LIFTIGNITER_TPL_PREFIX',     'liftigniter-');
define('LIFTIGNITER_TPL_EXT',        '.mst');

/**
 * Implements hook_preprocess_page().
 */
function liftigniter_preprocess_page(&$variables) {
  $config = \Drupal::config('liftigniter.settings');
  if (!$config->get('liftigniter_toggle')) {
    return;
  }

  $js_settings = [];

  // Just piggy-back/simplify DataLayer entity data colleciton code.
  if (\Drupal::moduleHandler()->moduleExists('datalayer') && $config->get('liftigniter_metadata')) {

    // Load the metadata.
    $result = liftigniter_get_metadata();

    // Put data on the page.
    $html_head = [
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#value' => Json::encode($result['metadata']),
      '#attributes' => [
        'type' => 'application/json',
        'id' => 'liftigniter-metadata',
      ]
    ];
    $variables['#attached']['html_head'][] = [$html_head, 'liftigniter-metadata'];

    // Create field list settings for the page.
    $js_settings = [
      'fields' => array_merge($result['properties'], [
        'title',
        'thumbnail',
        'type',
        'bundle',
      ]),
    ];
  }

  // Create global settings array for the page.
  $js_global_settings = [
    'apiKey' =>  $config->get('liftigniter_api_key'),
    'useWaypoints' => $config->get('liftigniter_waypoints'),
    'useLang' => $config->get('liftigniter_use_language'),
    'langDefaultNoPrefix' => $config->get('liftigniter_lang_default_no_prefix'),
    'forceSameProtocol' => $config->get('liftigniter_force_same_protocol'),
    'transformCallbacks' => [],
  ];
  // Add the settings to the page.
  $variables['#attached']['drupalSettings']['liftIgniter'] = $js_global_settings + $js_settings;

}

/**
 * Loads the metadata for a given entity object.
 *
 * @param $type
 *  The type of the entity.
 * @param $entity
 *  The entity itself.
 *
 * @return array
 */
function liftigniter_get_metadata() {
  $entity = _datalayer_menu_get_any_object();
  $type = $entity->getEntityType()->id();

  $properties = ['language'];

  $metadata = [];

  if (is_object($entity) && $type) {
    // Add basic entity details.
    $metadata['type'] = $type;
    $metadata['bundle'] = $entity->type->entity->label();
    $metadata['uuid'] = $entity->uuid();
    if ($type == 'node') {
      $metadata['nid'] = $entity->id();
    }

    // Entity property addition via hook.
    foreach (\Drupal::moduleHandler()->getImplementations('liftigniter_meta') as $module) {
      // Combine modules implementing hook_liftigniter_meta().
      $properties = array_merge($properties, \Drupal::moduleHandler()->invoke($module, 'liftigniter_meta'));
    }

    // Collect data.
    foreach ($properties as $property) {
      if (isset($entity->$property)) {
        $properties[$property] = $entity->$property;
      }
    }
  }

  // Allow manual changes.
  \Drupal::moduleHandler()->alter('liftigniter_meta', $output_data, $type, $entity, $entity_info);

  return array(
    'metadata' => $metadata,
    'properties' => $properties,
  );
}

/**
 * Implements hook_block_view().
 *
 * @param string $delta
 *
 * @return array
 */
function liftigniter_block_view($delta = '') {
  if (!\Drupal::config('liftigniter.settings')->get('liftigniter_toggle') || !\Drupal::currentUser()->hasPermission('view liftigniter blocks')) {
    return;
  }

  // Keep a running list of all widget blocks being output on the page.
  $widgets = &drupal_static(__FUNCTION__, array());
  $widget_id = preg_replace('/^widget_/', '', $delta);

  // Place mustache template in the head.
  $template_output = array(
    '#type' => 'html_tag',
    '#tag' => 'script',
    '#value' => "\r\n" . _liftigniter_get_template($widget_id),
    '#attributes' => array(
      'type' => 'application/mustache',
      'id' => LIFTIGNITER_LIST_PREFIX . $widget_id,
    ),
  );
  drupal_add_html_head($template_output, 'liftigniter_template_' . $widget_id);

  // Update static variable.
  // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// $widgets = array($widget_id => array(
//     'max' => variable_get('liftigniter_max_results-' . $delta, 5),
//   )) + $widgets;


  // Return block render array for DOM placeholder and inject global settings.
  $block = array(
    'subject' => t('Recommended'),
    'content' => array(
      '#markup' => '<div id="' . LIFTIGNITER_LIST_PREFIX . $widget_id . '"></div>',
      '#attached' => array(
        'js' => array(
          array('type' => 'setting', 'data' => array('liftIgniter' => array(
            'widgets' => $widgets,
          ))),
          // @todo Self-hosted script option.
          array('type' => 'inline', 'data' => _liftigniter_get_script()),
          drupal_get_path('module', 'liftigniter') . '/liftigniter.js',
        ),
      ),
    ),
  );

  // Delay front-end API requests. Allow different library names.
  $waypoints = FALSE;
  if (libraries_get_path('jquery-waypoints')) {
    $waypoints = 'jquery-waypoints';
  }
  if (libraries_get_path('waypoints')) {
    $waypoints = 'waypoints';
  }
  if ($waypoints) {
    $block['#attached']['library'][] = $waypoints;
  }

  return $block;
}


/**
 * Discover which template file to use.
 *
 * @return string
 *   Contents of template file.
 */
function _liftigniter_get_template($widget_id) {
  // Check static or cached version. NOTE: Assignment test.
  // @FIXME Update caching.
  if ($template = &drupal_static(__FUNCTION__ . $widget_id, FALSE)) {
    return $template;
  }
  if ($cached = \Drupal::cache()->get('liftigniter_template_' . $widget_id)) {
    $template = $cached->data;
    return $template;
  }

  // Find and open the template file.
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $theme_path = drupal_get_path('theme', $theme) . '/';
  $locations = array(
    $theme_path . 'templates/' . $widget_id,
    $theme_path . 'templates/default-widget',
    $theme_path . $widget_id,
    $theme_path . 'default-widget',
    drupal_get_path('module', 'liftigniter') . '/' . $widget_id,
    drupal_get_path('module', 'liftigniter') . '/default-widget',
  );
  // Allow inserting candidate template locations.
  \Drupal::moduleHandler()->alter('liftigniter_templates', $locations);

  // Test until found.
  foreach (array_unique($locations) as $path) {
    if (is_file($path . LIFTIGNITER_TPL_EXT)) {
      // Get, stash and go.
      $template = file_get_contents($path . LIFTIGNITER_TPL_EXT);
      \Drupal::cache()->set('liftigniter_template_' . $widget_id, $template);
      return $template;
    }
  }

  \Drupal::logger('liftigniter')->error('LiftIgniter template file missing: @file', array('@file' => $widget_id));
  return FALSE;
}


/**
 * Return the embed code with key inserted.
 * @return string
 */
function _liftigniter_get_script() {
  // Assignment test for key set.
  if ($key = \Drupal::config('liftigniter.settings')->get('liftigniter_api_key')) {
    // Customer specific JS URL option.
    $filename = \Drupal::config('liftigniter.settings')->get('liftigniter_customer_js_url') ? $key : 'p';
    $js_url = 'cdn.petametrics.com/' . $filename . '.js';

    return <<<EOD
(function(w,d,s,p,v,e,r) {w['\$petametrics_var']=v;w[v]=w[v]||function(){(w[v].q=w[v].q||[]).push(arguments)};w[v].l=1*new Date();e=d.createElement(s),r=d.getElementsByTagName(s)[0];e.async=1;e.src=p;r.parentNode.insertBefore(e,r)})(window,document,'script','//$js_url','\$p');
\$p('init', '$key');
\$p('send', 'pageview');
EOD;
  }

  return '';
}
